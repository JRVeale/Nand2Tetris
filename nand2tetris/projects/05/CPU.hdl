// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	ALU(x=Dout,y=AMout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM,out=ALUoutM,zr=ALUzr,ng=ALUng);
	
	//D register
	And(a=instruction[4],b=instruction[15],out=destD);	
	DRegister(in=ALUoutM,load=destD,out=Dout);					//Write to D IF is a c-instruction AND dest includes D
	
	//A register
	Not(in=instruction[15],out=aInstr);
	Mux16(a=ALUoutM,b=instruction,sel=aInstr,out=Ain);			//Load new A *from instruction* if is an a-instruction
	Or(a=instruction[5],b=aInstr,out=Aload);
	ARegister(in=Ain,load=Aload,out=Aout,out[0..14]=addressM);	//Write to A IF is an a-instruction OR dest includes A
	
	//WriteM?
	And(a=instruction[15],b=instruction[3],out=writeM);			//Write output to memory[A] IF is a c-instruction AND dest includes M
	
	//A or M?
	Mux16(a=Aout,b=inM,sel=instruction[12],out=AMout);
	
	//Program Counter
	And(a=ALUng,b=instruction[2],out=jng);			//Jump if negative
	And(a=ALUzr,b=instruction[1],out=jeq);			//Jump if equal
	Or(a=ALUzr,b=ALUng,out=lte);
	Not(in=lte,out=positive);
	And(a=positive,b=instruction[0],out=jpos);		//Jump if positive
	Or(a=jng,b=jeq,out=jle);
	Or(a=jle,b=jpos,out=jumpifc);					
	And(a=jumpifc,b=instruction[15],out=jump);		//Jump if any of the above jumps AND c instruction
	Not(in=jump,out=PCinc);							//Otherwise, increment
	PC(in=Aout,load=jump,inc=PCinc,reset=reset,out[0..14]=pc);
}